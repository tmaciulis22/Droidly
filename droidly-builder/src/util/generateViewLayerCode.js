import Blockly from 'blockly';

export default function generateViewLayerCode(screenBlocks, startScreen) {
  const indent = Blockly.Kotlin.INDENT
  const code = []

  code.push(
    '/**',
    '* GENERATED BY DROIDLY BLOCK BUILDER',
    '**/',
    '',
    'enum class Screen(',
    `${indent}val composable: @Composable (NavController) -> Unit = {},`,
    `${indent}val showTopBar: Boolean = false,`,
    `${indent}val bottomBarTabIcon: ImageVector? = null // for screens which show DroidlyBottomBar`,
    ') {'
  )

  screenBlocks.forEach((block, index) => {
    const name = block.getFieldValue('SCREEN_NAME')
    const isModelScreen = block.type === 'modelScreen'
    const composable = isModelScreen 
      ? `{ navController, modelId -> ${name}(navController, modelId) }`
      :  `{ navController, _ -> ${name}(navController) }`
    const showTopBar = block.getFieldValue('SHOW_TOP_BAR') === 'TRUE' ? 'true' : 'false'
    const bottomBarTabIconValue = block.getFieldValue('BOTTOM_TAB_ICON')
    const includeIcon = bottomBarTabIconValue !== 'NO_BAR' && bottomBarTabIconValue !== null
    const bottomBarTabIcon = includeIcon ? `Icons.Default.${bottomBarTabIconValue}` : 'null'
    const commaOrSemicolon = index === screenBlocks.length -1 ? ';' : ','

    code.push(`${indent}${name}(${composable}, ${isModelScreen}, ${showTopBar}, ${bottomBarTabIcon})${commaOrSemicolon}`)
  })

  code.push(
    '',
    `${indent}companion object {`,
    `${indent}${indent}val startingScreen: String`,
    `${indent}${indent}${indent}get() = ${startScreen}.name`,
    `${indent}${indent}val screensWithTopBar: List<Screen>`,
    `${indent}${indent}${indent}get() = values().filter { it.showTopBar }`,
    `${indent}${indent}val bottomNavTabs: List<Screen>`,
    `${indent}${indent}${indent}get() = values().filter { it.bottomBarTabIcon != null }`,
    `${indent}}`,
    '}',
    '',
    ''
  )

  return code.join('\n')
}
