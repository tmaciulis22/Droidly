package com.example.droidly

import androidx.navigation.NavController
import androidx.compose.runtime.Composable
import com.example.droidly.ui.view.*
import androidx.compose.foundation.layout.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.room.*
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import dagger.hilt.android.lifecycle.HiltViewModel
import java.util.Date
import javax.inject.Singleton
import okhttp3.OkHttpClient
import javax.inject.Inject
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.hilt.navigation.compose.hiltViewModel
import kotlinx.coroutines.launch
import com.example.droidly.ui.navigation.navigate
import android.content.Context
import android.util.Log

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideAppDatabase(@ApplicationContext appContext: Context): AppDatabase {
        return Room.databaseBuilder(
            appContext,
            AppDatabase::class.java,
            "droidly-database"
        ).fallbackToDestructiveMigration().build()
    }

    @Singleton
    @Provides
    fun provideMoshi(): Moshi =
        Moshi
            .Builder()
            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
            .addLast(KotlinJsonAdapterFactory())
            .build()

    @Singleton
    @Provides
    fun provideOkHttpClient(): OkHttpClient =
        OkHttpClient()
            .newBuilder()
            .build()

    @Singleton
    @Provides
    fun provideCarDao(appDatabase: AppDatabase): CarDao = appDatabase.getCarDao()

}

@Database(
    entities = [
        Car::class,
    ],
    version = 1
)
abstract class AppDatabase : RoomDatabase() {
    abstract fun getCarDao(): CarDao
}

data class MainState(
    val isLoading: Boolean = false,
    val cars: List<Car> = emptyList(),
)

@HiltViewModel
class MainViewModel @Inject constructor(
    val carDao: CarDao
) : ViewModel() {

    var mainState by mutableStateOf(MainState())
        private set

    fun readAllCars() = viewModelScope.launch {
        mainState = mainState.copy(isLoading = true)
        val cars = carDao.readAll()
        mainState = mainState.copy(cars = cars)
        mainState = mainState.copy(
            isLoading = false,
            cars = cars
        )
    }

    fun saveCar(car: Car) = viewModelScope.launch {
        mainState = mainState.copy(isLoading = true)
        carDao.save(car)
        val cars = carDao.readAll()
        mainState = mainState.copy(
            isLoading = false,
            cars = cars
        )
    }

    fun deleteCar(car: Car) = viewModelScope.launch {
        mainState = mainState.copy(isLoading = true)
        carDao.delete(car)
        mainState = mainState.copy(cars = mainState.cars.filter { it != car })
        mainState = mainState.copy(isLoading = false)
    }

}
/**
* GENERATED BY DROIDLY BLOCK BUILDER
**/

enum class Screen(
    val composable: @Composable (NavController, Long, MainViewModel) -> Unit = {_, _, _ -> },
    val isModelScreen: Boolean = false,
    val showTopBar: Boolean = false,
    val bottomBarTabIcon: ImageVector? = null // for screens which show DroidlyBottomBar
) {
    Cars({ navController, _, mainViewModel -> Cars(navController, mainViewModel) }, false, false, null),
    CreateCar({ navController, modelId, mainViewModel -> CreateCar(navController, modelId, mainViewModel) }, true, false, null),
    CarDetails({ navController, modelId, mainViewModel -> CarDetails(navController, modelId, mainViewModel) }, true, false, null);

    companion object {
        val startingScreen: String
            get() = Cars.name
        val screensWithTopBar: List<Screen>
            get() = values().filter { it.showTopBar }
        val bottomNavTabs: List<Screen>
            get() = values().filter { it.bottomBarTabIcon != null }
    }
}

@Dao
interface CarDao {

    @Query("SELECT * FROM car")
    suspend fun readAll(): List<Car>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun save(entity: Car)

    @Delete
    suspend fun delete(entity: Car)
}

@Entity(tableName = "car")
data class Car(
    @PrimaryKey(autoGenerate = true) val id: Long? = null,
    var brand: String? = null,
    var model: String? = null,
    var year: Double? = null,
)

@Composable
fun Cars(
    navController: NavController,
    mainViewModel: MainViewModel = hiltViewModel()
) {
    LaunchedEffect("Cars") {
        mainViewModel.readAllCars()
    }
    Column(
        modifier = Modifier
            .padding(all = 16.dp)
            .fillMaxHeight(),
    ) {
        DroidlyLazyColumn(
            modifier = Modifier,
            dataList = mainViewModel.mainState.cars
        ) { item ->
            DroidlySurface(
                modifier = Modifier
                    .padding(bottom = 12.dp),
                elevation = 2.dp,
                onClick = { navController.navigate("CarDetails", item.id) }
            ) {
                Column(
                    modifier = Modifier,
                ) {
                    DroidlyText(
                        modifier = Modifier
                            .padding(all = 6.dp),
                        text = item.brand.toString(),
                    )
                    DroidlyText(
                        modifier = Modifier
                            .padding(all = 6.dp),
                        text = item.model.toString(),
                    )
                    DroidlyText(
                        modifier = Modifier
                            .padding(all = 6.dp),
                        text = item.year.toString(),
                    )
                }
            }
        }
        DroidlyFAB(
            modifier = Modifier,
            onClick = { navController.navigate("CreateCar", -1L) },
            text = "Add",
        )
    }
}

@Composable
fun CreateCar(
    navController: NavController,
    modelId: Long,
    mainViewModel: MainViewModel = hiltViewModel()
) {
    val item = mainViewModel.mainState.cars.firstOrNull { it.id == modelId } ?: Car()
    Column(
        modifier = Modifier
            .padding(all = 16.dp),
    ) {
        DroidlyTextField(
            modifier = Modifier
                .padding(bottom = 12.dp),
            placeholder = "Brand",
            onValueChanged = { item.brand = it },
        )
        DroidlyTextField(
            modifier = Modifier
                .padding(bottom = 12.dp),
            placeholder = "Model",
            onValueChanged = { item.model = it },
        )
        DroidlyButton(
            modifier = Modifier,
            onClick = {
                mainViewModel.saveCar(item)
                navController.navigateUp()
             },
            text = "Create",
        )
    }
}

@Composable
fun CarDetails(
    navController: NavController,
    modelId: Long,
    mainViewModel: MainViewModel = hiltViewModel()
) {
    val item = mainViewModel.mainState.cars.firstOrNull { it.id == modelId } ?: Car()
    Log.i("TAUTTEST", modelId.toString())
    Log.i("TAUTTEST", item.id.toString())
    Column(
        modifier = Modifier
            .padding(all = 16.dp),
    ) {
        DroidlyText(
            modifier = Modifier
                .padding(bottom = 12.dp),
            text = item.brand.toString(),
            fontSize = 24.sp,
            fontWeight = FontWeight.W800,
        )
        DroidlyImage(
            modifier = Modifier
                .padding(bottom = 12.dp),
            url = "https://images.unsplash.com/photo-1561361513-2d000a50f0dc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1176&q=80",
        )
        DroidlyButton(
            modifier = Modifier,
            onClick = { navController.navigateUp() },
            text = "Go back",
        )
    }
}
