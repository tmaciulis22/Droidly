package com.example.droidly

import androidx.navigation.NavController
import androidx.compose.runtime.Composable
import com.example.droidly.ui.view.*
import com.example.droidly.ui.screens.*
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.graphics.vector.ImageVector
import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.Rfc3339DateJsonAdapter
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import dagger.hilt.android.lifecycle.HiltViewModel
import java.util.Date
import javax.inject.Singleton
import okhttp3.OkHttpClient
import javax.inject.Inject
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.hilt.navigation.compose.hiltViewModel
import kotlinx.coroutines.launch
import com.example.droidly.util.navigate
import com.google.firebase.ktx.Firebase
import com.google.firebase.database.ktx.database
import com.google.firebase.database.DatabaseReference
import com.example.droidly.util.getListOfModels

/**
* GENERATED BY DROIDLY BLOCK BUILDER
**/

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideFirebaseDatabase() = Firebase
        .database
        .reference

    @Provides
    @Singleton
    fun provideMoshi(): Moshi =
        Moshi
            .Builder()
            .add(Date::class.java, Rfc3339DateJsonAdapter().nullSafe())
            .addLast(KotlinJsonAdapterFactory())
            .build()

    @Provides
    @Singleton
    fun provideOkHttpClient(): OkHttpClient =
        OkHttpClient()
            .newBuilder()
            .build()

}

data class MainState(
    val isLoading: Boolean = false,
    val warehouseItems: List<WarehouseItem> = emptyList(),
)

@HiltViewModel
class MainViewModel @Inject constructor(
    private val firebaseDatabase: DatabaseReference,
) : ViewModel() {

    var mainState by mutableStateOf(MainState())
        private set

    var picUri by mutableStateOf("")
        private set
    fun setPicUri(newUri: String) = viewModelScope.launch {
        picUri = newUri
    }

    fun readAllWarehouseItems() = viewModelScope.launch {
        mainState = mainState.copy(isLoading = true)
        firebaseDatabase.child("warehouseItem").get().addOnSuccessListener {
            val warehouseItems = it.getListOfModels<WarehouseItem>()
            mainState = mainState.copy(warehouseItems = warehouseItems)
            mainState = mainState.copy(isLoading = false)
        }.addOnFailureListener {
            mainState = mainState.copy(isLoading = false)
        }
    }

    fun saveWarehouseItem(warehouseItem: WarehouseItem) = viewModelScope.launch {
        mainState = mainState.copy(isLoading = true)
        if (warehouseItem.id == "-1") {
            val pushRef = firebaseDatabase.child("warehouseItem").push()
            val newKey = pushRef.key ?: "-1"
            val updatedWarehouseItem = warehouseItem.copy(id = newKey)
            pushRef.setValue(updatedWarehouseItem) { _, _ ->
                val updatedWarehouseItems = mainState.warehouseItems.toMutableList()
                mainState = mainState.copy(warehouseItems = updatedWarehouseItems)
                mainState = mainState.copy(isLoading = false)
            }
        } else {
            firebaseDatabase.child("warehouseItem").child(warehouseItem.id).setValue(warehouseItem)
            mainState = mainState.copy(isLoading = false)
        }
    }

    fun deleteWarehouseItem(warehouseItem: WarehouseItem) = viewModelScope.launch {
        mainState = mainState.copy(isLoading = true)
        if (warehouseItem.id != "-1") {
            firebaseDatabase.child("warehouseItem").child(warehouseItem.id).removeValue()
        }
        mainState = mainState.copy(warehouseItems = mainState.warehouseItems.filter { it != warehouseItem })
        mainState = mainState.copy(isLoading = false)
    }

}
enum class Screen(
    val composable: @Composable (NavController, String, MainViewModel) -> Unit = {_, _, _ -> },
    val isModelScreen: Boolean = false,
    val showTopBar: Boolean = false,
    val bottomBarTabIcon: ImageVector? = null // for screens which show DroidlyBottomBar
) {
    CameraScreen({ navController, _, mainViewModel -> CameraScreen(navController, mainViewModel) }),
    Items({ navController, _, mainViewModel -> Items(navController, mainViewModel) }, false, false, null),
    CreateItem({ navController, modelId, mainViewModel -> CreateItem(navController, modelId, mainViewModel) }, true, true, null);

    companion object {
        val startingScreen: String
            get() = Items.name
        val screensWithTopBar: List<Screen>
            get() = values().filter { it.showTopBar }
        val bottomNavTabs: List<Screen>
            get() = values().filter { it.bottomBarTabIcon != null }
    }
}

@Composable
fun CameraScreen(
    navController: NavController,
    mainViewModel: MainViewModel
) {
    DroidlyCamera {
        mainViewModel.setPicUri(it)
        navController.navigateUp()
    }
}

data class WarehouseItem(
    val id: String = "-1",
    var name: String? = null,
    var quantity: Double? = null,
    var photoUrl: String? = null,
)

@Composable
fun Items(
    navController: NavController,
    mainViewModel: MainViewModel = hiltViewModel()
) {
    LaunchedEffect("Items") {
        mainViewModel.readAllWarehouseItems()
    }
    Column(
        modifier = Modifier
            .padding(all = 12.dp)
            .fillMaxHeight(),
    ) {
        DroidlyLazyColumn(
            modifier = Modifier,
            dataList = mainViewModel.mainState.warehouseItems
        ) { item ->
            DroidlySurface(
                modifier = Modifier
                    .padding(bottom = 12.dp),
                elevation = 2.dp,
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically,
                ) {
                    DroidlyImage(
                        modifier = Modifier
                            .height(128.dp)
                            .width(128.dp)
                            .padding(end = 8.dp),
                        url = item.photoUrl ?: "-",
                    )
                    Column(
                        modifier = Modifier,
                    ) {
                        DroidlyText(
                            modifier = Modifier
                                .padding(end = 6.dp)
                                .padding(bottom = 6.dp),
                            text = item.name ?: "-",
                            color = Color(0xFF2ecc71),
                            fontSize = 24.sp,
                            fontWeight = FontWeight.W800,
                        )
                        Row(
                            modifier = Modifier,
                        ) {
                            DroidlyText(
                                modifier = Modifier
                                    .padding(end = 6.dp),
                                text = "Quantity:",
                            )
                            DroidlyText(
                                modifier = Modifier
                                    .padding(end = 8.dp),
                                text = item.quantity?.toString() ?: "-",
                            )
                        }
                    }
                    DroidlyIconButton(
                        modifier = Modifier,
                        imageVector = Icons.Default.Close,
                        onClick = { mainViewModel.deleteWarehouseItem(item) },
                    )
                }
            }
        }
        DroidlyFAB(
            modifier = Modifier,
            onClick = { navController.navigate("CreateItem", "-1") },
            imageVector = Icons.Default.Add,
        )
    }
}

@Composable
fun CreateItem(
    navController: NavController,
    modelId: String,
    mainViewModel: MainViewModel = hiltViewModel()
) {
    val item = mainViewModel.mainState.warehouseItems.firstOrNull { it.id == modelId } ?: WarehouseItem()
    Column(
        modifier = Modifier
            .padding(all = 12.dp),
    ) {
        DroidlySurface(
            modifier = Modifier
                .padding(bottom = 12.dp),
            elevation = 0.dp,
            onClick = { navController.navigate("CameraScreen") }
        ) {
            DroidlyImage(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(256.dp),
                url = item.photoUrl ?: mainViewModel.picUri,
            )
        }
        DroidlyTextField(
            modifier = Modifier
                .padding(bottom = 12.dp)
                .fillMaxWidth(),
            placeholder = "Item name",
            onValueChanged = { item.name = it },
        )
        DroidlyTextField(
            modifier = Modifier
                .padding(bottom = 12.dp)
                .fillMaxWidth(),
            placeholder = "Quantity",
            onValueChanged = { item.quantity = it.toDouble() },
        )
        DroidlyButton(
            modifier = Modifier
                .align(Alignment.End),
            onClick = {
                item.photoUrl = mainViewModel.picUri
                mainViewModel.setPicUri("")
                mainViewModel.saveWarehouseItem(item)
                navController.navigateUp()
            },
            text = "Create",
        )
    }
}
